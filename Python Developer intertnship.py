# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j5MAulhxZjPlVqrXD5cE3c6-3peKAO4g

# **Level 1**
## **Task 1 - String Reversal**
"""

def reverse_string(input_str):
    return input_str[::-1]

# Test the function
input_str = "hello"
print(reverse_string(input_str))

"""## **Task 2 - Temperature Conversion**"""

def celsius_to_fahrenheit(celsius):
    return (celsius * 9/5) + 32

def fahrenheit_to_celsius(fahrenheit):
    return (fahrenheit - 32) * 5/9

def main():
    print("Temperature Conversion Program")
    print("-------------------------------")
    print("1. Celsius to Fahrenheit")
    print("2. Fahrenheit to Celsius")
    choice = input("Enter your choice (1 or 2): ")

    if choice == '1':
        celsius = float(input("Enter temperature in Celsius: "))
        converted_temp = celsius_to_fahrenheit(celsius)
        print(f"{celsius} Celsius is equal to {converted_temp} Fahrenheit.")
    elif choice == '2':
        fahrenheit = float(input("Enter temperature in Fahrenheit: "))
        converted_temp = fahrenheit_to_celsius(fahrenheit)
        print(f"{fahrenheit} Fahrenheit is equal to {converted_temp} Celsius.")
    else:
        print("Invalid choice. Please enter either 1 or 2.")

if __name__ == "__main__":
    main()

"""## **Task 3 - Email Validator**"""

import re

def validate_email(email):
    # Regular expression pattern for email validation
    pattern = r'^[\w\.-]+@[\w\.-]+\.\w+$'
    if re.match(pattern, email):
        return True
    else:
        return False

# Test the function
email1 = "example@email.com"
email2 = "invalid_email.com"

print(validate_email(email1))
print(validate_email(email2))

"""## **Task 4 - Calculator Program**"""

def add(num1, num2):
    return num1 + num2

def subtract(num1, num2):
    return num1 - num2

def multiply(num1, num2):
    return num1 * num2

def divide(num1, num2):
    if num2 == 0:
        return "Error! Division by zero is not allowed."
    else:
        return num1 / num2

def modulo(num1, num2):
    if num2 == 0:
        return "Error! Modulo by zero is not allowed."
    else:
        return num1 % num2

def calculator():
    print("Calculator Program")
    print("-------------------")
    num1 = float(input("Enter the first number: "))
    operator = input("Enter the operator (+, -, *, /, %): ")
    num2 = float(input("Enter the second number: "))

    if operator == '+':
        print("Result:", add(num1, num2))
    elif operator == '-':
        print("Result:", subtract(num1, num2))
    elif operator == '*':
        print("Result:", multiply(num1, num2))
    elif operator == '/':
        print("Result:", divide(num1, num2))
    elif operator == '%':
        print("Result:", modulo(num1, num2))
    else:
        print("Invalid operator.")

if __name__ == "__main__":
    calculator()

"""## **Task 5 - Palindrome Checker**"""

def is_palindrome(s):
    # Remove non-alphanumeric characters and convert to lowercase
    s = ''.join(char.lower() for char in s if char.isalnum())
    # Check if the string equals its reverse
    return s == s[::-1]

# Test the function
print(is_palindrome("madam"))
print(is_palindrome("racecar"))
print(is_palindrome("hello"))

"""# **Level 2**
## **Task 1 - Guessing Game**
"""

import random

def guessing_game():
    print("Welcome to the Guessing Game!")
    print("I have picked a random number between 1 and 100.")
    secret_number = random.randint(1, 100)

    while True:
        guess = int(input("Enter your guess: "))
        if guess == secret_number:
            print("Congratulations! You guessed the correct number:", secret_number)
            break
        elif guess < secret_number:
            print("Too low! Try again.")
        else:
            print("Too high! Try again.")

if __name__ == "__main__":
    guessing_game()

"""## **Task 2 - Number Guesser**"""

import random

def number_guesser(lower_limit, upper_limit):
    print("Welcome to the Number Guesser Game!")
    print(f"I have picked a random number between {lower_limit} and {upper_limit}.")
    secret_number = random.randint(lower_limit, upper_limit)

    while True:
        guess = int(input("Enter your guess: "))
        if guess == secret_number:
            print("Congratulations! You guessed the correct number:", secret_number)
            break
        elif guess < secret_number:
            print("Too low! Try again.")
        else:
            print("Too high! Try again.")

if __name__ == "__main__":
    lower_limit = int(input("Enter the lower limit of the range: "))
    upper_limit = int(input("Enter the upper limit of the range: "))
    number_guesser(lower_limit, upper_limit)

"""## **Task 3 - Password Strength Checker**"""

import re

def password_strength(password):
    length_error = len(password) < 8
    digit_error = re.search(r"\d", password) is None
    uppercase_error = re.search(r"[A-Z]", password) is None
    lowercase_error = re.search(r"[a-z]", password) is None
    special_char_error = re.search(r"[ !@#$%^&*()_+{}\[\]:;<>,.?/\\]", password) is None

    errors = []
    if length_error:
        errors.append("Password should be at least 8 characters long.")
    if digit_error:
        errors.append("Password should contain at least one digit.")
    if uppercase_error:
        errors.append("Password should contain at least one uppercase letter.")
    if lowercase_error:
        errors.append("Password should contain at least one lowercase letter.")
    if special_char_error:
        errors.append("Password should contain at least one special character (!@#$%^&*()_+{}[]:;<>,.?/\\)")

    if errors:
        return False, errors
    else:
        return True, "Password strength is strong."

# Test the function
password = input("Enter your password: ")
strength, message = password_strength(password)
if strength:
    print("Password strength:", message)
else:
    print("Password is not strong. Errors:")
    for error in message:
        print("-", error)

"""## **Task 4 - Fibonacci Sequence**"""

def fibonacci_sequence(num_terms):
    fibonacci = [0, 1]  # Initialize the sequence with the first two terms

    # Generate the Fibonacci sequence up to num_terms
    for i in range(2, num_terms):
        next_term = fibonacci[-1] + fibonacci[-2]
        fibonacci.append(next_term)

    return fibonacci

def main():
    num_terms = int(input("Enter the number of terms for the Fibonacci sequence: "))
    sequence = fibonacci_sequence(num_terms)
    print("Fibonacci Sequence:")
    print(sequence)

if __name__ == "__main__":
    main()

"""## **Task 5 - File Manipulation**"""

def count_word_occurrences(file_path):
    word_count = {}

    # Open the file and read its contents
    try:
        with open(file_path, 'r') as file:
            for line in file:
                # Split each line into words
                words = line.split()
                for word in words:
                    # Remove punctuation and convert to lowercase
                    word = word.strip('.,!?').lower()
                    # Update word count dictionary
                    if word in word_count:
                        word_count[word] += 1
                    else:
                        word_count[word] = 1
    except FileNotFoundError:
        print(f"Error: File '{file_path}' not found.")
        return None

    # Sort the word count dictionary by keys (words)
    sorted_word_count = sorted(word_count.items(), key=lambda x: x[0])
    return sorted_word_count

def main():
    file_path = input("Enter the path to the text file: ")
    word_counts = count_word_occurrences(file_path)

    if word_counts is not None:
        print("Word Counts:")
        for word, count in word_counts:
            print(f"{word}: {count}")

if __name__ == "__main__":
    main()

"""# **Level 3**
## **Task 1 - Build a Web Scraper**
"""

import requests
from bs4 import BeautifulSoup

def scrape_website(url):
    # Send a GET request to the URL
    response = requests.get(url)

    # Check if the request was successful (status code 200)
    if response.status_code == 200:
        # Parse the HTML content of the page
        soup = BeautifulSoup(response.text, 'html.parser')

        # Extract specific data from the HTML
        # For example, let's extract all the <h2> tags
        headings = soup.find_all('h2')

        # Print the text of each <h2> tag
        for heading in headings:
            print(heading.text)
    else:
        print("Failed to retrieve the web page.")

"""## **Task 2 - Data Visualization Tool**"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

def visualize_dataset(dataset_path):
    # Load the dataset
    data = pd.read_csv(dataset_path)

    # Display basic information about the dataset
    print("Dataset Information:")
    print(data.info())

    # Display the first few rows of the dataset
    print("\nFirst Few Rows of the Dataset:")
    print(data.head())

    # Generate visualizations
    print("\nGenerating Visualizations...")
    # Example: Histogram of a numerical column
    plt.figure(figsize=(10, 6))
    sns.histplot(data['Age'], bins=20, kde=True)
    plt.title("Distribution of Age")
    plt.xlabel("Age")
    plt.ylabel("Count")
    plt.show()

    # Example: Scatter plot of two numerical columns
    plt.figure(figsize=(10, 6))
    sns.scatterplot(x='Height', y='Weight', data=data)
    plt.title("Scatter Plot of Height vs Weight")
    plt.xlabel("Height")
    plt.ylabel("Weight")
    plt.show()

"""## **Task 3 - Automate a Task**"""

import os

def rename_files(directory, pattern):
    # Get a list of all files in the directory
    files = os.listdir(directory)

    # Iterate over each file in the directory
    for filename in files:
        # Check if the file matches the pattern
        if pattern in filename:
            # Define the new filename (you can customize this)
            new_filename = filename.replace(pattern, "_new_")

            # Construct the full paths
            old_path = os.path.join(directory, filename)
            new_path = os.path.join(directory, new_filename)

            # Rename the file
            os.rename(old_path, new_path)

            print(f"Renamed: {filename} -> {new_filename}")